{"version":3,"sources":["App.js","serviceWorker.js","index.js","klotski.js","Board.js"],"names":["App","state","width","height","defaultLayout","handleRadioButtonChange","e","console","log","target","_this","setState","Number","id","handleChange","value","name","Object","defineProperty","preventDefault","_this2","this","react_default","a","createElement","className","onSubmit","handleSubmit","type","onChange","gamePositions","map","g","i","style","display","margin","key","Board","pieces","checked","backgroundColor","borderTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","hash","require","DIRECTIONS","LEFT","UP","RIGHT","DOWN","DIRECTIONS_MAP","keys","reduce","prev","curr","PieceType","BLOCK","V2","H2","CUBE","EMPTY","BOARDER","printPiece","Position","left","top","_Users_Cedric_Documents_Alg_random_klotski_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","direction","moveLeft","moveRight","moveUp","moveDown","Error","concat","position","successPosition","Piece","moveTo","copy","newPosition","piece","isEmpty","equals","lessThan","parseInt","piecesPlaced","initBoard","board","push","j","cubeIndex","Array","isArray","cube","forEach","p","canAddPieceToBoard","msg","addPieceToBoard","p1","getPiece","p2","printBoard","targetPosition","rslt","canBeReplacedBy","rightPiece","diagPiece","downPiece","_piece$position","pieceIndex","fromPosition","toPosition","clearRectangle","clearPiece","hashMap","copyMirrorDumbPiece","dumbPieces","copyDumbPiece","sort","b","mirrorDumbPieces","getZobristHash","mirrorHash","getMirrorZobristHash","useSymbol","arguments","length","undefined","row","Move","GamePosition","_this3","tryToMovePiece","isContinuing","canPieceMoveTo","newGamePosition","movePieceTo","parent","step","move","_Users_Cedric_Documents_Alg_random_klotski_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","index","isResolved","initPieces","copyPieces","initPosition","getHash","getMirrorHash","moves","unshift","Game","initialPosition","_this4","findSolution","maxSolution","positions","solutionCounts","solutions","bfsSearchSolution","gamePosition","getPieces","d","upsertState","continueGamePosition","memories","zobristHash","pieceTypes","k","tmp","Math","floor","random","pow","generateZobrisHashMap","getBoardWidth","getBoardHeight","plays","reversePlay","SliderWithTooltip","Slider","createSliderWithTooltip","SOLVER_MAX_FRAME_TIME","PRIMAY_BUTTON_TEXT_MAP","solving","playing","paused","finished","solved","DEFAULT_PLAYBACK_SPEED","props","_Users_Cedric_Documents_Alg_random_klotski_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_Cedric_Documents_Alg_random_klotski_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_Cedric_Documents_Alg_random_klotski_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","handleAfterChange","playbackSpeed","setImmediate","autoPlayState","playGame","handlePlay","_this$state","game","isCalculated","setTimeout","iteration","pauseGame","intervalHandle","frameSolve","count","requestAnimationFrame","_this$state2","getSolution","alert","handle","setInterval","clearInterval","getBoardToRender","_this$state3","initialPieces","gameState","initializeGame","_Users_Cedric_Documents_Alg_random_klotski_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","prevProps","prevState","react__WEBPACK_IMPORTED_MODULE_6___default","GameBoard","justifyContent","alignItems","railStyle","trackStyle","activeDotStyle","onBeforeChange","onAfterChange","min","max","defaultValue","marks","100","200","300","400","500","onClick","disabled","PureComponent","_PureComponent2","apply","_Users_Cedric_Documents_Alg_random_klotski_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","_Users_Cedric_Documents_Alg_random_klotski_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","gamePieces","blockWidth","blockHeight","gamePiece","Block","renderBlocks","_this$props","pieceWidth","pieceHeight","join"],"mappings":"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","file":"static/js/main.b6c9cc68.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Board, { GameBoard } from \"./Board\";\nimport \"./App.css\";\nimport { gamePositions } from \"./klotski\";\n\nclass App extends Component {\n  state = {\n    width: 4,\n    height: 5,\n    defaultLayout: 0\n  };\n  handleSubmit(e) {\n    e.preventDefault();\n  }\n  handleRadioButtonChange = e => {\n    console.log(e.target);\n    this.setState({ defaultLayout: Number(e.target.id) });\n  };\n  handleChange = e => {\n    const value = Number(e.target.value);\n    if (\n      (e.target.name === \"width\" && value >= 4) ||\n      (e.target.name === \"height\" && value >= 5)\n    )\n      this.setState({\n        [e.target.name]: value\n      });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>\n              Width:\n              <input\n                type=\"number\"\n                name=\"width\"\n                value={this.state.width}\n                onChange={this.handleChange}\n              />\n            </label>\n\n            <label>\n              Height:\n              <input\n                type=\"number\"\n                name=\"height\"\n                value={this.state.height}\n                onChange={this.handleChange}\n              />\n            </label>\n          </div>\n          <h3>Choose your layout</h3>\n          <div>\n            {gamePositions.map((g, i) => {\n              return (\n                <div style={{ display: \"inline-block\", margin: 16 }} key={i}>\n                  <GameBoard\n                    width={this.state.width}\n                    height={this.state.height}\n                    pieces={g}\n                  />\n                  <div>\n                    <input\n                      type=\"radio\"\n                      name=\"layout\"\n                      id={i}\n                      checked={i === this.state.defaultLayout}\n                      onChange={this.handleRadioButtonChange}\n                    />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </form>\n        <hr\n          style={{\n            backgroundColor: \"#fff\",\n            borderTop: \"2px dashed #8c8b8b\",\n            margin: 16\n          }}\n        />\n        <div style={{ margin: 32 }}>\n          <Board\n            width={this.state.width}\n            height={this.state.height}\n            defaultLayout={this.state.defaultLayout}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const hash = require(\"object-hash\");\n\nconst DIRECTIONS = {\n  LEFT: 0,\n  UP: 1,\n  RIGHT: 2,\n  DOWN: 3\n};\n\nconst DIRECTIONS_MAP = Object.keys(DIRECTIONS).reduce((prev, curr) => {\n  prev[DIRECTIONS[curr]] = curr;\n  return prev;\n}, {});\n\nexport const PieceType = {\n  BLOCK: 0,\n  V2: 1,\n  H2: 2,\n  CUBE: 3,\n  EMPTY: 4,\n  BOARDER: 5\n};\n\nconst successTop = 3;\nconst successLeft = 1;\n\nconst HASH_METHOD = \"ZOBRIST\";\nfunction printPiece(type) {\n  switch (type) {\n    case PieceType.BLOCK:\n      return \"BL\";\n    case PieceType.V2:\n      return \"V2\";\n    case PieceType.H2:\n      return \"H2\";\n    case PieceType.CUBE:\n      return \"CB\";\n    case PieceType.EMPTY:\n      return \"O \";\n    case PieceType.BOARDER:\n      return \"X \";\n    default:\n      return \"! \";\n  }\n}\n\nclass Position {\n  constructor(left, top) {\n    this.left = left;\n    this.top = top;\n  }\n\n  copy() {\n    return new Position(this.left, this.top);\n  }\n\n  moveTo(direction) {\n    switch (direction) {\n      case DIRECTIONS.LEFT:\n        return this.moveLeft();\n      case DIRECTIONS.RIGHT:\n        return this.moveRight();\n      case DIRECTIONS.UP:\n        return this.moveUp();\n      case DIRECTIONS.DOWN:\n        return this.moveDown();\n      default:\n        throw new Error(`Unknown direction to move to: ${direction}`);\n    }\n  }\n\n  equals(position) {\n    return this.left === position.left && this.top === position.top;\n  }\n\n  moveLeft() {\n    this.left--;\n    return this;\n  }\n\n  moveRight() {\n    this.left++;\n    return this;\n  }\n\n  moveUp() {\n    this.top--;\n    return this;\n  }\n\n  moveDown() {\n    this.top++;\n    return this;\n  }\n\n  lessThan(position) {\n    if (this.top < position.top) return true;\n    else if (this.top > position.top) return false;\n    else {\n      return this.left < position.left;\n    }\n  }\n}\n\nconst successPosition = new Position(successLeft, successTop);\n\nclass Piece {\n  constructor(type, position, id, name) {\n    this.id = id;\n    this.name = name;\n    this.type = type;\n    this.position = position;\n  }\n\n  moveTo(direction) {\n    this.position.moveTo(direction);\n  }\n\n  copy() {\n    const pieceCopy = new Piece(\n      this.type,\n      this.position.copy(),\n      this.id,\n      this.name\n    );\n    return pieceCopy;\n  }\n\n  copyDumbPiece() {\n    return new Piece(this.type, this.position.copy());\n  }\n\n  copyMirrorDumbPiece(width) {\n    const newPosition = this.position.copy();\n    if (this.type === PieceType.H2 || this.type === PieceType.CUBE) {\n      newPosition.left = width - 2 - newPosition.left;\n    } else {\n      newPosition.left = width - 1 - newPosition.left;\n    }\n    return new Piece(this.type, newPosition);\n  }\n\n  canBeReplacedBy(piece) {\n    return this.isEmpty() || this.equals(piece);\n  }\n\n  isEmpty() {\n    return this.type === PieceType.EMPTY;\n  }\n\n  equals(piece) {\n    return this.id && this.id === piece.id;\n  }\n\n  lessThan(piece) {\n    if (this.type < piece.type) return true;\n    else if (this.type > piece.type) return false;\n    else {\n      return this.position.lessThan(piece.position);\n    }\n  }\n}\n\nexport const gamePositions = [\n  [\n    new Piece(PieceType.V2, new Position(0, 0), 0, \"zf\"),\n    new Piece(PieceType.CUBE, new Position(1, 0), 1, \"cc\"),\n    new Piece(PieceType.V2, new Position(3, 0), 2, \"mc\"),\n    new Piece(PieceType.V2, new Position(0, 2), 3, \"zy\"),\n    new Piece(PieceType.H2, new Position(1, 2), 4, \"gy\"),\n    new Piece(PieceType.V2, new Position(3, 2), 5, \"hz\"),\n    new Piece(PieceType.BLOCK, new Position(0, 4), 6, \"b\"),\n    new Piece(PieceType.BLOCK, new Position(1, 3), 7, \"b\"),\n    new Piece(PieceType.BLOCK, new Position(2, 3), 8, \"b\"),\n    new Piece(PieceType.BLOCK, new Position(3, 4), 9, \"b\")\n  ],\n  [\n    new Piece(PieceType.V2, new Position(0, 0), 0, \"zf\"),\n    new Piece(PieceType.CUBE, new Position(1, 0), 1, \"cc\"),\n    new Piece(PieceType.V2, new Position(3, 0), 2, \"gy\"),\n    new Piece(PieceType.BLOCK, new Position(0, 2), 3, \"b\"),\n    new Piece(PieceType.H2, new Position(1, 2), 4, \"zy\"),\n    new Piece(PieceType.BLOCK, new Position(3, 2), 5, \"b\"),\n    new Piece(PieceType.V2, new Position(0, 3), 6, \"hz\"),\n    new Piece(PieceType.BLOCK, new Position(1, 3), 7, \"b\"),\n    new Piece(PieceType.BLOCK, new Position(2, 3), 8, \"b\"),\n    new Piece(PieceType.V2, new Position(3, 3), 9, \"mc\")\n  ],\n  [\n    new Piece(PieceType.BLOCK, new Position(0, 0), 0, \"b\"),\n    new Piece(PieceType.CUBE, new Position(1, 0), 1, \"cc\"),\n    new Piece(PieceType.BLOCK, new Position(3, 0), 2, \"b\"),\n    new Piece(PieceType.V2, new Position(0, 1), 3, \"zf\"),\n    new Piece(PieceType.H2, new Position(1, 2), 4, \"zy\"),\n    new Piece(PieceType.V2, new Position(3, 1), 5, \"gy\"),\n    new Piece(PieceType.V2, new Position(0, 3), 6, \"hz\"),\n    new Piece(PieceType.BLOCK, new Position(1, 3), 7, \"b\"),\n    new Piece(PieceType.BLOCK, new Position(2, 3), 8, \"b\"),\n    new Piece(PieceType.V2, new Position(3, 3), 9, \"mc\")\n  ]\n];\n\nclass Board {\n  constructor(width, height) {\n    if (parseInt(width) !== +width) {\n      throw new Error(\"value of width is invalid:  \", width);\n    }\n\n    if (parseInt(height) !== +height) {\n      throw new Error(\"value of height is invalid: \", height);\n    }\n    this.width = width;\n    this.height = height;\n    this.piecesPlaced = false;\n    this.initBoard();\n  }\n\n  initBoard() {\n    const board = [];\n    for (let i = 0; i < this.height + 2; i++) {\n      board.push([]);\n      for (let j = 0; j < this.width + 2; j++) {\n        const position = new Position(i, j);\n        let piece = null;\n        if (\n          i === 0 ||\n          j === 0 ||\n          i === this.height + 1 ||\n          j === this.width + 1\n        ) {\n          piece = new Piece(PieceType.BOARDER, position);\n        } else {\n          piece = new Piece(PieceType.EMPTY, position);\n        }\n        board[i][j] = piece;\n      }\n    }\n    this.board = board;\n    return board;\n  }\n\n  initPieces(pieces, cubeIndex) {\n    if (!Array.isArray(pieces)) {\n      throw new Error(\"pieces should be an array!\");\n    }\n    this.pieces = pieces;\n    this.cubeIndex = cubeIndex;\n    this.cube = this.pieces[cubeIndex];\n    pieces.forEach((p, i) => {\n      if (!this.canAddPieceToBoard(p)) {\n        const msg = `Piece of index ${i} could not be put on board`;\n        console.log(msg);\n        throw new Error(msg);\n      }\n      this.addPieceToBoard(p);\n    });\n    this.piecesPlaced = true;\n  }\n\n  equals(board) {\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        const p1 = this.getPiece(new Position(j, i));\n        const p2 = board.getPiece(new Position(j, i));\n        if (p1.type !== p2.type) {\n          this.printBoard();\n          board.printBoard();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  getPiece(position) {\n    return this.board[position.top + 1][position.left + 1];\n  }\n\n  isResolved() {\n    return this.cube.position.equals(successPosition);\n  }\n\n  canAddPieceToBoard(piece, targetPosition) {\n    let position = targetPosition || piece.position;\n    position = position.copy();\n    const topLeftPiece = this.getPiece(position);\n    let rslt = topLeftPiece.canBeReplacedBy(piece);\n    if (!rslt) {\n      return false;\n    }\n\n    const rightPiece = this.getPiece(position.moveRight());\n    const diagPiece = this.getPiece(position.moveDown());\n    const downPiece = this.getPiece(position.moveLeft());\n    switch (piece.type) {\n      case PieceType.BLOCK:\n        return rslt;\n      case PieceType.H2:\n        return rightPiece.canBeReplacedBy(piece);\n      case PieceType.V2:\n        return downPiece.canBeReplacedBy(piece);\n      case PieceType.CUBE:\n        return (\n          rightPiece.canBeReplacedBy(piece) &&\n          downPiece.canBeReplacedBy(piece) &&\n          diagPiece.canBeReplacedBy(piece)\n        );\n      default:\n        return false;\n    }\n  }\n\n  addPieceToBoard(piece) {\n    const { left, top } = piece.position;\n    switch (piece.type) {\n      case PieceType.BLOCK:\n        this.board[top + 1][left + 1] = piece;\n        break;\n      case PieceType.H2:\n        this.board[top + 1][left + 1] = piece;\n        this.board[top + 1][left + 2] = piece;\n        break;\n      case PieceType.V2:\n        this.board[top + 1][left + 1] = piece;\n        this.board[top + 2][left + 1] = piece;\n        break;\n      case PieceType.CUBE:\n        this.board[top + 1][left + 1] = piece;\n        this.board[top + 1][left + 2] = piece;\n        this.board[top + 2][left + 2] = piece;\n        this.board[top + 2][left + 1] = piece;\n        break;\n      default:\n        return false;\n    }\n    return true;\n  }\n\n  canPieceMoveTo(pieceIndex, direction) {\n    const piece = this.pieces[pieceIndex];\n    return this.canAddPieceToBoard(\n      piece,\n      piece.position.copy().moveTo(direction)\n    );\n  }\n\n  clearRectangle(fromPosition, toPosition) {\n    for (let i = fromPosition.top; i <= toPosition.top; i++) {\n      for (let j = fromPosition.left; j <= toPosition.left; j++) {\n        this.board[i + 1][j + 1] = new Piece(\n          PieceType.EMPTY,\n          new Position(j, i)\n        );\n      }\n    }\n  }\n\n  clearPiece(piece) {\n    const { position } = piece;\n    switch (piece.type) {\n      case PieceType.BLOCK:\n        this.clearRectangle(position, position);\n        break;\n      case PieceType.V2:\n        this.clearRectangle(position, position.copy().moveDown());\n        break;\n      case PieceType.H2:\n        this.clearRectangle(position, position.copy().moveRight());\n        break;\n      case PieceType.CUBE:\n        this.clearRectangle(\n          position,\n          position\n            .copy()\n            .moveRight()\n            .moveDown()\n        );\n        break;\n      default:\n        throw new Error(`Unknow piece type: ${piece.type}`);\n    }\n  }\n\n  movePieceTo(pieceIndex, direction) {\n    const piece = this.pieces[pieceIndex];\n    this.clearPiece(piece);\n    piece.moveTo(direction);\n    this.addPieceToBoard(piece);\n    return true;\n  }\n\n  getZobristHash(hashMap) {\n    let hash = 0;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        hash ^= hashMap[i][j][this.board[i + 1][j + 1].type];\n      }\n    }\n    return hash;\n  }\n\n  getMirrorZobristHash(hashMap) {\n    let hash = 0;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        hash ^=\n          hashMap[i][j][\n            this.getPiece(new Position(j, i)).copyMirrorDumbPiece().type\n          ];\n      }\n    }\n    return hash;\n  }\n\n  getPieceHash() {\n    const dumbPieces = this.pieces.map(p => p.copyDumbPiece());\n    return hash(dumbPieces.sort((a, b) => a.lessThan(b)));\n  }\n\n  getMirrorPieceHash() {\n    const mirrorDumbPieces = this.pieces.map(p =>\n      p.copyMirrorDumbPiece(this.width)\n    );\n    return hash(mirrorDumbPieces.sort((a, b) => a.lessThan(b)));\n  }\n\n  getHash(hashMap) {\n    if (this.hash) {\n      return this.hash;\n    }\n    if (HASH_METHOD === \"ZOBRIST\") {\n      this.hash = this.getZobristHash(hashMap);\n    } else {\n      this.hash = this.getPieceHash();\n    }\n    return this.hash;\n  }\n\n  getMirrorHash(hashMap) {\n    if (this.mirrorHash) {\n      return this.mirrorHash;\n    }\n\n    if (HASH_METHOD === \"ZOBRIST\") {\n      this.mirrorHash = this.getMirrorZobristHash(hashMap);\n    } else {\n      this.mirrorHash = this.getMirrorPieceHash();\n    }\n    return this.mirrorHash;\n  }\n\n  printBoard(useSymbol = true) {\n    for (let i = 0; i < this.height + 2; i++) {\n      let row = \"\";\n      for (let j = 0; j < this.width + 2; j++) {\n        row =\n          row +\n          (useSymbol\n            ? printPiece(this.board[i][j].type)\n            : this.board[i][j].id === undefined\n            ? -1\n            : this.board[i][j].id) +\n          \" \";\n      }\n      console.log(row);\n    }\n  }\n}\n\nclass Move {\n  constructor(pieceIndex, direction, length) {\n    this.pieceIndex = pieceIndex;\n    this.direction = direction;\n    this.length = length;\n  }\n}\n\nexport class GamePosition {\n  constructor(width, height) {\n    this.board = new Board(width, height);\n    this.parent = null;\n    this.step = 0;\n    this.move = null;\n    this.width = width;\n    this.height = height;\n  }\n  getBoardWidth() {\n    return this.width;\n  }\n\n  getBoardHeight() {\n    return this.height;\n  }\n\n  getPieces() {\n    return this.board.pieces;\n  }\n\n  getPiece(index) {\n    return this.board.pieces[index];\n  }\n\n  isResolved() {\n    return this.board.isResolved();\n  }\n\n  initPosition(pieces, cubeIndex) {\n    this.cubeIndex = cubeIndex;\n    return this.board.initPieces(pieces, cubeIndex);\n  }\n\n  copy() {\n    const rslt = new GamePosition(this.width, this.height);\n    const copyPieces = this.board.pieces.map(p => p.copy());\n    rslt.initPosition(copyPieces, this.cubeIndex);\n    return rslt;\n  }\n\n  printCubePosition() {\n    console.log(\"Cube position is: \", this.getPiece(this.cubeIndex).position);\n  }\n\n  canPieceMoveTo(pieceIndex, direction) {\n    return this.board.canPieceMoveTo(pieceIndex, direction);\n  }\n\n  movePieceTo(pieceIndex, direction) {\n    return this.board.movePieceTo(pieceIndex, direction);\n  }\n\n  tryToMovePiece = (pieceIndex, direction, isContinuing = false) => {\n    if (this.canPieceMoveTo(pieceIndex, direction)) {\n      const newGamePosition = this.copy();\n      newGamePosition.movePieceTo(pieceIndex, direction);\n\n      newGamePosition.parent = this;\n      newGamePosition.step++;\n      newGamePosition.move = new Move(pieceIndex, direction, 1);\n      if (isContinuing) {\n        newGamePosition.parent = this.parent;\n        newGamePosition.step--;\n        newGamePosition.move = new Move(pieceIndex, direction, 2);\n      }\n      return newGamePosition;\n    }\n    return null;\n  };\n  printMove() {\n    console.log(\n      `Moving pieace: ${this.getPiece(this.move.pieceIndex).name} ${\n        DIRECTIONS_MAP[this.move.direction]\n      } ${this.move.length} step(s)`\n    );\n  }\n\n  printGamePosition() {\n    this.board.printBoard();\n  }\n\n  getHash(hashMap) {\n    return this.board.getHash(hashMap);\n  }\n\n  getMirrorHash(hashMap) {\n    return this.board.getMirrorHash(hashMap);\n  }\n\n  reversePlay() {\n    const moves = [];\n    let curr = this;\n    while (curr.parent !== null) {\n      moves.unshift(curr);\n      curr = curr.parent;\n    }\n    return moves;\n  }\n}\nfunction generateZobrisHashMap(width, height, pieceTypes) {\n  const rslt = [];\n  for (let i = 0; i < height; i++) {\n    rslt.push([]);\n    for (let j = 0; j < width; j++) {\n      rslt[i].push([]);\n      for (let k = 0; k < Object.keys(pieceTypes).length; k++) {\n        let tmp = 0;\n        while (!tmp) {\n          tmp = Math.floor(Math.random() * Math.pow(2, 31));\n        }\n        rslt[i][j].push(tmp);\n      }\n    }\n  }\n  return rslt;\n}\nexport class Game {\n  constructor(initialPosition) {\n    this.initialPosition = initialPosition;\n    this.positions = [initialPosition];\n    this.solutions = [];\n    this.solutionCounts = 0;\n    this.memories = {};\n    this.index = 0;\n\n    this.zobristHash = generateZobrisHashMap(\n      initialPosition.getBoardWidth(),\n      initialPosition.getBoardHeight(),\n      PieceType\n    );\n  }\n\n  upsertState(newGamePosition) {\n    if (!this.memories[newGamePosition.getHash(this.zobristHash)]) {\n      this.positions.push(newGamePosition);\n      this.memories[\n        newGamePosition.getHash(this.zobristHash)\n      ] = newGamePosition;\n      this.memories[\n        newGamePosition.getMirrorHash(this.zobristHash)\n      ] = newGamePosition;\n      return newGamePosition.getHash(this.zobristHash);\n    } else {\n    }\n    return null;\n  }\n\n  findSolution = (maxSolution = 1) => {\n    //try each move for each piece.\n    this.index = 0;\n    while (this.index < this.positions.length) {\n      const curr = this.positions[this.index];\n      if (curr.isResolved()) {\n        this.solutionCounts++;\n        this.solutions.push(curr.getHash());\n        if (this.solutionCounts >= maxSolution) {\n          return;\n        }\n      } else {\n        this.bfsSearchSolution(curr);\n      }\n      this.index++;\n    }\n  };\n\n  bfsSearchSolution = gamePosition => {\n    gamePosition.getPieces().forEach((p, i) => {\n      Object.keys(DIRECTIONS).forEach(d => {\n        const newGamePosition = gamePosition.tryToMovePiece(i, DIRECTIONS[d]);\n        if (!newGamePosition) {\n          return;\n        }\n        this.upsertState(newGamePosition);\n        // continue one step, two same direction step as one step\n        const continueGamePosition = newGamePosition.tryToMovePiece(\n          i,\n          DIRECTIONS[d],\n          true\n        );\n        if (!continueGamePosition) {\n          return;\n        }\n        this.upsertState(continueGamePosition);\n      });\n    });\n  };\n\n  hasSolution() {\n    return this.solutions.length !== 0;\n  }\n\n  isCalculated() {\n    return this.index >= this.positions.length;\n  }\n\n  getSolution(index = 0) {\n    if (this.solutions.length === 0) {\n      return null;\n    }\n    this.plays = this.memories[this.solutions[index]].reversePlay();\n    return this.plays;\n  }\n}\n\nfunction play(initialPosition, gamePositions) {\n  initialPosition.printGamePosition();\n  gamePositions.forEach(gp => {\n    gp.printMove();\n    gp.printGamePosition();\n  });\n}\n\nfunction main() {\n  const gp = new GamePosition(4, 5);\n  gp.initPosition(gamePositions[1], 1);\n  gp.printGamePosition(false);\n  const game = new Game(gp);\n  game.findSolution();\n  const endingPosition = game.memories[game.solutions[0]];\n  const plays = endingPosition.reversePlay();\n  // play(gp, plays);\n  console.log(plays.length);\n}\n","import React, { PureComponent } from \"react\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nimport { gamePositions, PieceType, Game, GamePosition } from \"./klotski\";\n\nconst SliderWithTooltip = Slider.createSliderWithTooltip(Slider);\n\nconst SOLVER_MAX_FRAME_TIME = 100;\nconst PRIMAY_BUTTON_TEXT_MAP = {\n  solving: \"Solving...\",\n  playing: \"Pause\",\n  paused: \"Continue\",\n  finished: \"Reinitialize\",\n  undefined: \"Solve\",\n  solved: \"Play\"\n};\nconst DEFAULT_PLAYBACK_SPEED = 400;\nexport default class Board extends PureComponent {\n  static width = 200;\n  static height = 250;\n\n  constructor(props) {\n    super(props);\n    const gameState = this.initializeGame();\n    this.state = {\n      playbackSpeed: DEFAULT_PLAYBACK_SPEED,\n      ...gameState\n    };\n  }\n\n  initializeGame() {\n    console.log(\"initialize game state\");\n    console.log(this.props.width, this.props.height);\n    const initialPieces = gamePositions[this.props.defaultLayout];\n    const gamePosition = new GamePosition(this.props.width, this.props.height);\n    gamePosition.initPosition(initialPieces, 1);\n    const game = new Game(gamePosition);\n    return {\n      game,\n      initialPieces,\n      iteration: 0,\n      step: 0,\n      solving: false,\n      autoPlayState: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.width !== prevProps.width ||\n      this.props.height !== prevProps.height ||\n      this.props.defaultLayout !== prevProps.defaultLayout\n    ) {\n      console.log(\"component did update\");\n      const gameState = this.initializeGame();\n      this.setState({\n        ...gameState\n      });\n    }\n  }\n\n  handleAfterChange = value => {\n    this.setState({ playbackSpeed: value });\n    setImmediate(() => {\n      if (this.state.autoPlayState === \"paused\") {\n        this.playGame();\n      }\n    });\n  };\n\n  handlePlay = () => {\n    const { game, autoPlayState } = this.state;\n\n    if (autoPlayState === undefined && !game.isCalculated()) {\n      this.setState({\n        autoPlayState: \"solving\"\n      });\n      setTimeout(() => {\n        game.findSolution();\n        this.setState({\n          autoPlayState: \"solved\",\n          iteration: game.index\n        });\n      }, 200);\n    }\n    if (autoPlayState === \"solving\") {\n      return;\n    } else if (autoPlayState === \"solved\") {\n      this.playGame();\n    } else if (autoPlayState === \"playing\") {\n      this.pauseGame();\n    } else if (autoPlayState === \"paused\") {\n      this.playGame();\n    } else if (autoPlayState === \"finished\") {\n      this.setState({\n        intervalHandle: undefined,\n        autoPlayState: \"solved\",\n        step: 0\n      });\n    }\n  };\n\n  frameSolve = () => {\n    //try each move for each piece.\n    let count = 0;\n    const { game } = this.state;\n    while (\n      count < SOLVER_MAX_FRAME_TIME &&\n      game.index < game.positions.length\n    ) {\n      const curr = game.positions[game.index];\n      if (curr.isResolved()) {\n        game.solutionCounts++;\n        game.solutions.push(curr.getHash());\n        if (game.solutionCounts >= 3) {\n          return;\n        }\n      } else {\n        game.bfsSearchSolution(curr);\n      }\n      this.setState({\n        iteration: game.index\n      });\n      game.index++;\n      // count % 10 === 0 && console.log(count);\n      count++;\n    }\n    if (game.index >= game.positions.length) {\n      this.setState({\n        autoPlayState: \"solved\"\n      });\n      return;\n    }\n\n    requestAnimationFrame(this.frameSolve);\n  };\n\n  playGame = () => {\n    let { game, step } = this.state;\n    let plays = game.getSolution();\n    if (!plays) {\n      return alert(\"No solution found!\");\n    }\n    const handle = setInterval(() => {\n      if (step < plays.length) {\n        this.setState({ step });\n        step++;\n      } else {\n        handle && clearInterval(handle);\n        this.setState({ intervalHandle: undefined, autoPlayState: \"finished\" });\n      }\n    }, this.state.playbackSpeed);\n    this.setState({\n      intervalHandle: handle,\n      autoPlayState: \"playing\",\n      step\n    });\n  };\n\n  pauseGame = () => {\n    console.log(\"pausing game\");\n    const { intervalHandle } = this.state;\n    if (intervalHandle) {\n      clearInterval(intervalHandle);\n    }\n    if (this.state.autoPlayState === \"playing\") {\n      this.setState({ intervalHandle: undefined, autoPlayState: \"paused\" });\n    }\n  };\n\n  getBoardToRender = () => {\n    const { autoPlayState, step, game } = this.state;\n    let plays = game.getSolution();\n    if (autoPlayState === \"playing\" || autoPlayState === \"paused\") {\n      return plays[step].getPieces();\n    } else if (autoPlayState === \"finished\") {\n      return plays[plays.length - 1].getPieces();\n    } else {\n      return this.state.initialPieces;\n    }\n  };\n\n  render() {\n    const { autoPlayState } = this.state;\n    return (\n      <div>\n        <GameBoard\n          width={this.props.width}\n          height={this.props.height}\n          pieces={this.getBoardToRender()}\n        />\n        <div>\n          <div style={{ margin: 16 }}>Iterations: {this.state.iteration}</div>\n          {this.state.step ? (\n            <div style={{ margin: 16 }}>Steps: {this.state.step}</div>\n          ) : null}\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              margin: 32\n            }}\n          >\n            <div>Playback speed: </div>\n            <SliderWithTooltip\n              railStyle={{ backgroundColor: \"#c7ccca\" }}\n              trackStyle={{ backgroundColor: \"transparent\" }}\n              activeDotStyle={{ backgroundColor: \"transparent\" }}\n              onBeforeChange={this.pauseGame}\n              onAfterChange={this.handleAfterChange}\n              min={0}\n              max={600}\n              step={10}\n              defaultValue={this.state.playbackSpeed}\n              marks={{\n                100: \"100\",\n                200: \"200\",\n                300: \"300ms\",\n                400: \"400\",\n                500: \"500\"\n              }}\n            />\n          </div>\n          <button\n            id=\"solveBtn\"\n            onClick={this.handlePlay}\n            disabled={autoPlayState === \"solving\"}\n          >\n            {PRIMAY_BUTTON_TEXT_MAP[autoPlayState]}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport class GameBoard extends PureComponent {\n  renderBlocks() {\n    const gamePieces = this.props.pieces;\n    const blockWidth = Board.width / this.props.width;\n    const blockHeight = Board.height / this.props.height;\n    const rslt = gamePieces.map(gamePiece => {\n      return (\n        <Block\n          gamePiece={gamePiece}\n          blockHeight={blockHeight}\n          blockWidth={blockWidth}\n          key={gamePiece.id}\n        />\n      );\n    });\n    return rslt;\n  }\n  render() {\n    return <div id=\"frame\">{this.renderBlocks()}</div>;\n  }\n}\n\nclass Block extends PureComponent {\n  render() {\n    const { blockHeight, blockWidth, gamePiece } = this.props;\n    let pieceWidth = 1;\n    let pieceHeight = 1;\n    let left = gamePiece.position.left;\n    let top = gamePiece.position.top;\n    const className = [\"block\"];\n    if (gamePiece.type === PieceType.H2) {\n      pieceWidth = 2;\n      className.push(\"h2\");\n    } else if (gamePiece.type === PieceType.CUBE) {\n      pieceWidth = 2;\n      pieceHeight = 2;\n      className.push(\"cube\");\n    } else if (gamePiece.type === PieceType.V2) {\n      pieceHeight = 2;\n      className.push(\"v2\");\n    } else {\n      className.push(\"blk\");\n    }\n    const style = {\n      height: pieceHeight * blockHeight,\n      width: pieceWidth * blockWidth,\n      left: left * blockWidth,\n      top: top * blockHeight\n    };\n    return <div className={className.join(\" \")} style={style} />;\n  }\n}\n"],"sourceRoot":""}